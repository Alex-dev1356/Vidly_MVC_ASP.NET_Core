@*Rendering data through Model Property*@
@*@model Vidly_MVC_ASP.NET_Core.Models.Movie*@

@*Rendering data through ViewModel Property*@
@model Vidly_MVC_ASP.NET_Core.ViewModels.RandomMovieViewModel

@{
    ViewBag.Title = "Random";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*Using Model Property to display data*@
@*<h2>@Model.Name</h2>*@

@*Using ViewData Property, but it's ugly, compared when using the Model Property*@
@*<h2>@( ((Movie) ViewData["Movie"]).Name )</h2>*@

@*Using ViewBag Property, but it's ugly, compared when using the Model Property*@
@*<h2>@ViewBag.Movie</h2>*@

@*Using ViewModel Property to display data*@
@*<h2>@Model.Movie.Name</h2>*@

@*Another tricks using the razor syntax*@
@{ 
    //Here we can add any C# code
    var className = Model.Customers.Count > 0 ? "popular" : null;
}
@*We can render here the className variable to be a class name for the style in CSS and HTML*@
<h2 class="@className">@Model.Movie.Name</h2>

@if (Model.Customers.Count == 0)
{
    <p>No one has rented this movie before.</p>
}
else
{
    @*Rendering the list of Customers using foreach block*@
    <ul>
        @foreach (var customer in Model.Customers)
        {
            <li>@customer.Name</li>
        }
    </ul>
}

